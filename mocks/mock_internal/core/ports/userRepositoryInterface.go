// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/userRepositoryInterface.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/loukaspe/platform-go-challenge/internal/core/domain"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddFavouriteAsset mocks base method.
func (m *MockUserRepositoryInterface) AddFavouriteAsset(ctx context.Context, userId, assetId uint32, assetType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavouriteAsset", ctx, userId, assetId, assetType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFavouriteAsset indicates an expected call of AddFavouriteAsset.
func (mr *MockUserRepositoryInterfaceMockRecorder) AddFavouriteAsset(ctx, userId, assetId, assetType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavouriteAsset", reflect.TypeOf((*MockUserRepositoryInterface)(nil).AddFavouriteAsset), ctx, userId, assetId, assetType)
}

// CreateUser mocks base method.
func (m *MockUserRepositoryInterface) CreateUser(arg0 context.Context, arg1 *domain.User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockUserRepositoryInterface) DeleteUser(arg0 context.Context, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).DeleteUser), arg0, arg1)
}

// EditFavouriteAssetDescription mocks base method.
func (m *MockUserRepositoryInterface) EditFavouriteAssetDescription(ctx context.Context, userId, assetId uint32, assetType, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditFavouriteAssetDescription", ctx, userId, assetId, assetType, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditFavouriteAssetDescription indicates an expected call of EditFavouriteAssetDescription.
func (mr *MockUserRepositoryInterfaceMockRecorder) EditFavouriteAssetDescription(ctx, userId, assetId, assetType, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditFavouriteAssetDescription", reflect.TypeOf((*MockUserRepositoryInterface)(nil).EditFavouriteAssetDescription), ctx, userId, assetId, assetType, description)
}

// GetUser mocks base method.
func (m *MockUserRepositoryInterface) GetUser(ctx context.Context, userId uint32) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userId)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUser), ctx, userId)
}

// RemoveFavouriteAsset mocks base method.
func (m *MockUserRepositoryInterface) RemoveFavouriteAsset(ctx context.Context, userId, assetId uint32, assetType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFavouriteAsset", ctx, userId, assetId, assetType)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFavouriteAsset indicates an expected call of RemoveFavouriteAsset.
func (mr *MockUserRepositoryInterfaceMockRecorder) RemoveFavouriteAsset(ctx, userId, assetId, assetType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFavouriteAsset", reflect.TypeOf((*MockUserRepositoryInterface)(nil).RemoveFavouriteAsset), ctx, userId, assetId, assetType)
}

// UpdateUser mocks base method.
func (m *MockUserRepositoryInterface) UpdateUser(arg0 context.Context, arg1 uint32, arg2 *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateUser), arg0, arg1, arg2)
}
