// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/services/userFavouritesService.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/loukaspe/platform-go-challenge/internal/core/domain"
)

// MockUserFavouriteServiceInterface is a mock of UserFavouriteServiceInterface interface.
type MockUserFavouriteServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserFavouriteServiceInterfaceMockRecorder
}

// MockUserFavouriteServiceInterfaceMockRecorder is the mock recorder for MockUserFavouriteServiceInterface.
type MockUserFavouriteServiceInterfaceMockRecorder struct {
	mock *MockUserFavouriteServiceInterface
}

// NewMockUserFavouriteServiceInterface creates a new mock instance.
func NewMockUserFavouriteServiceInterface(ctrl *gomock.Controller) *MockUserFavouriteServiceInterface {
	mock := &MockUserFavouriteServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserFavouriteServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFavouriteServiceInterface) EXPECT() *MockUserFavouriteServiceInterfaceMockRecorder {
	return m.recorder
}

// AddAsset mocks base method.
func (m *MockUserFavouriteServiceInterface) AddAsset(ctx context.Context, userId, assetId uint, assetType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAsset", ctx, userId, assetId, assetType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAsset indicates an expected call of AddAsset.
func (mr *MockUserFavouriteServiceInterfaceMockRecorder) AddAsset(ctx, userId, assetId, assetType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAsset", reflect.TypeOf((*MockUserFavouriteServiceInterface)(nil).AddAsset), ctx, userId, assetId, assetType)
}

// EditAssetDescription mocks base method.
func (m *MockUserFavouriteServiceInterface) EditAssetDescription(ctx context.Context, userId, assetId uint, assetType, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAssetDescription", ctx, userId, assetId, assetType, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditAssetDescription indicates an expected call of EditAssetDescription.
func (mr *MockUserFavouriteServiceInterfaceMockRecorder) EditAssetDescription(ctx, userId, assetId, assetType, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAssetDescription", reflect.TypeOf((*MockUserFavouriteServiceInterface)(nil).EditAssetDescription), ctx, userId, assetId, assetType, description)
}

// GetAssets mocks base method.
func (m *MockUserFavouriteServiceInterface) GetAssets(ctx context.Context, userId uint) ([]domain.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssets", ctx, userId)
	ret0, _ := ret[0].([]domain.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssets indicates an expected call of GetAssets.
func (mr *MockUserFavouriteServiceInterfaceMockRecorder) GetAssets(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssets", reflect.TypeOf((*MockUserFavouriteServiceInterface)(nil).GetAssets), ctx, userId)
}

// RemoveAsset mocks base method.
func (m *MockUserFavouriteServiceInterface) RemoveAsset(ctx context.Context, userId, assetId uint, assetType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAsset", ctx, userId, assetId, assetType)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAsset indicates an expected call of RemoveAsset.
func (mr *MockUserFavouriteServiceInterfaceMockRecorder) RemoveAsset(ctx, userId, assetId, assetType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAsset", reflect.TypeOf((*MockUserFavouriteServiceInterface)(nil).RemoveAsset), ctx, userId, assetId, assetType)
}
