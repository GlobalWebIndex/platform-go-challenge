// proto/serv/opinion/v1/opinion_srv.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: proto/serv/opinion/v1/opinion_srv.proto

package opinionpbapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OpinionService_Create_FullMethodName = "/proto.servstd.opinion.v1.OpinionService/Create"
	OpinionService_Get_FullMethodName    = "/proto.servstd.opinion.v1.OpinionService/Get"
	OpinionService_Gett_FullMethodName   = "/proto.servstd.opinion.v1.OpinionService/Gett"
	OpinionService_Update_FullMethodName = "/proto.servstd.opinion.v1.OpinionService/Update"
	OpinionService_Delete_FullMethodName = "/proto.servstd.opinion.v1.OpinionService/Delete"
	OpinionService_List_FullMethodName   = "/proto.servstd.opinion.v1.OpinionService/List"
)

// OpinionServiceClient is the client API for OpinionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpinionServiceClient interface {
	// Create
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Get
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Gett
	Gett(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Update
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Delete
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// List/Filter - stream opinions of a user
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (OpinionService_ListClient, error)
}

type opinionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpinionServiceClient(cc grpc.ClientConnInterface) OpinionServiceClient {
	return &opinionServiceClient{cc}
}

func (c *opinionServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, OpinionService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opinionServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, OpinionService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opinionServiceClient) Gett(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, OpinionService_Gett_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opinionServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, OpinionService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opinionServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, OpinionService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opinionServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (OpinionService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpinionService_ServiceDesc.Streams[0], OpinionService_List_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &opinionServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpinionService_ListClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type opinionServiceListClient struct {
	grpc.ClientStream
}

func (x *opinionServiceListClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpinionServiceServer is the server API for OpinionService service.
// All implementations must embed UnimplementedOpinionServiceServer
// for forward compatibility
type OpinionServiceServer interface {
	// Create
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Get
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Gett
	Gett(context.Context, *GetRequest) (*GetResponse, error)
	// Update
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Delete
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// List/Filter - stream opinions of a user
	List(*ListRequest, OpinionService_ListServer) error
	mustEmbedUnimplementedOpinionServiceServer()
}

// UnimplementedOpinionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpinionServiceServer struct {
}

func (UnimplementedOpinionServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOpinionServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOpinionServiceServer) Gett(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gett not implemented")
}
func (UnimplementedOpinionServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOpinionServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOpinionServiceServer) List(*ListRequest, OpinionService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOpinionServiceServer) mustEmbedUnimplementedOpinionServiceServer() {}

// UnsafeOpinionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpinionServiceServer will
// result in compilation errors.
type UnsafeOpinionServiceServer interface {
	mustEmbedUnimplementedOpinionServiceServer()
}

func RegisterOpinionServiceServer(s grpc.ServiceRegistrar, srv OpinionServiceServer) {
	s.RegisterService(&OpinionService_ServiceDesc, srv)
}

func _OpinionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpinionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpinionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpinionServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpinionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpinionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpinionService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpinionServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpinionService_Gett_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpinionServiceServer).Gett(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpinionService_Gett_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpinionServiceServer).Gett(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpinionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpinionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpinionService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpinionServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpinionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpinionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpinionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpinionServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpinionService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpinionServiceServer).List(m, &opinionServiceListServer{stream})
}

type OpinionService_ListServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type opinionServiceListServer struct {
	grpc.ServerStream
}

func (x *opinionServiceListServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

// OpinionService_ServiceDesc is the grpc.ServiceDesc for OpinionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpinionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.servstd.opinion.v1.OpinionService",
	HandlerType: (*OpinionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OpinionService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _OpinionService_Get_Handler,
		},
		{
			MethodName: "Gett",
			Handler:    _OpinionService_Gett_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OpinionService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OpinionService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _OpinionService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/serv/opinion/v1/opinion_srv.proto",
}
