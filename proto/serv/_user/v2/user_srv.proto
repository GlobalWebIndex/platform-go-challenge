// proto/serv/_user/v2/user_srv.proto

syntax = "proto3";

package proto.serv._user.v2;

// /usr/local/include/google/protobuf/
import "google/api/annotations.proto";
// import "google/api/http.proto";
// import "google/protobuf/any.proto";
// import "google/protobuf/duration.proto";
// import "google/protobuf/empty.proto";
// import "google/protobuf/field_mask.proto";
// import "google/protobuf/struct.proto";
// import "google/protobuf/timestamp.proto";
// import "google/protobuf/wrappers.proto";
// import "google/rpc/status.proto";
import "proto/core/_share/v1/share.proto";
import "proto/core/_user/v1/user.proto";
// import "proto/core/favourite/v1/favourite.proto";
// import "proto/core/opinion/v1/opinion.proto";
// https://github.com/bufbuild/protoc-gen-validate
// import "validate/validate.proto";

option go_package = "x-gwi/proto/serv/_user/v2;userpbapiv2";

// UserService
// a microservice to handle companies. It provides the following operations:
// • Create, • Patch, • Delete, • Get (one)
// standard methods: List, Get, Create, Update, and Delete
service UserService {
  // Create
  rpc Create(proto.core._user.v1.UserCore)
      returns (proto.core._user.v1.UserCore) {
    option (google.api.http) = {
      post: "/api/v2/user/create"
      body: "*"
    };
  };

  // Get
  rpc Get(proto.core._share.v1.ShareQID)
      returns (proto.core._user.v1.UserCore) {
    option (google.api.http) = {
      get: "/api/v2/user/get/{key}"
      additional_bindings { post: "/api/v2/user/get" body: "*" }
    };
  };

  // Gett
  rpc Gett(proto.core._share.v1.ShareQID)
      returns (proto.core._user.v1.UserCore);

  // Update
  rpc Update(proto.core._user.v1.UserCore)
      returns (proto.core._user.v1.UserCore) {
    option (google.api.http) = {
      patch: "/api/v2/user/update/{qid.key}/{qid.rev}"
      body: "*"
      // additional_bindings {
      //   put: "/api/v2/user/update/{qid.key}/{qid.rev}"
      //   body: "*"
      // }
    };
  };

  // Delete
  rpc Delete(proto.core._share.v1.ShareQID)
      returns (proto.core._user.v1.UserCore) {
    option (google.api.http) = {
      delete: "/api/v2/user/delete/{key}"
    };
  };

  // List/Filter - stream user matching request
  rpc List(proto.core._user.v1.UserCore)
      returns (stream proto.core._user.v1.UserCore) {
    option (google.api.http) = {
      post: "/api/v2/user/list"
      body: "*"
      additional_bindings { post: "/api/v2/user/filter" body: "*" }
    };
  };
}
