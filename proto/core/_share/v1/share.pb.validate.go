// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/core/_share/v1/share.proto

package sharepb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _share_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ShareQID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareQID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareQID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareQIDMultiError, or nil
// if none found.
func (m *ShareQID) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareQID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetKind() != "" {

		if utf8.RuneCountInString(m.GetKind()) > 128 {
			err := ShareQIDValidationError{
				field:  "Kind",
				reason: "value length must be at most 128 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetKey() != "" {

		if utf8.RuneCountInString(m.GetKey()) > 128 {
			err := ShareQIDValidationError{
				field:  "Key",
				reason: "value length must be at most 128 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetUid() != "" {

		if utf8.RuneCountInString(m.GetUid()) > 128 {
			err := ShareQIDValidationError{
				field:  "Uid",
				reason: "value length must be at most 128 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetUuid() != "" {

		if err := m._validateUuid(m.GetUuid()); err != nil {
			err = ShareQIDValidationError{
				field:  "Uuid",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetRev() != "" {

		if utf8.RuneCountInString(m.GetRev()) > 128 {
			err := ShareQIDValidationError{
				field:  "Rev",
				reason: "value length must be at most 128 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ShareQIDMultiError(errors)
	}

	return nil
}

func (m *ShareQID) _validateUuid(uuid string) error {
	if matched := _share_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ShareQIDMultiError is an error wrapping multiple validation errors returned
// by ShareQID.ValidateAll() if the designated constraints aren't met.
type ShareQIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareQIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareQIDMultiError) AllErrors() []error { return m }

// ShareQIDValidationError is the validation error returned by
// ShareQID.Validate if the designated constraints aren't met.
type ShareQIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareQIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareQIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareQIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareQIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareQIDValidationError) ErrorName() string { return "ShareQIDValidationError" }

// Error satisfies the builtin error interface
func (e ShareQIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareQID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareQIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareQIDValidationError{}

// Validate checks the field values on MetaDescription with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MetaDescription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetaDescription with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetaDescriptionMultiError, or nil if none found.
func (m *MetaDescription) ValidateAll() error {
	return m.validate(true)
}

func (m *MetaDescription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Title != nil {

		if m.GetTitle() != "" {

			if utf8.RuneCountInString(m.GetTitle()) > 256 {
				err := MetaDescriptionValidationError{
					field:  "Title",
					reason: "value length must be at most 256 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Topic != nil {

		if m.GetTopic() != "" {

			if utf8.RuneCountInString(m.GetTopic()) > 256 {
				err := MetaDescriptionValidationError{
					field:  "Topic",
					reason: "value length must be at most 256 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Label != nil {

		if m.GetLabel() != "" {

			if utf8.RuneCountInString(m.GetLabel()) > 256 {
				err := MetaDescriptionValidationError{
					field:  "Label",
					reason: "value length must be at most 256 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Description != nil {

		if m.GetDescription() != "" {

			if utf8.RuneCountInString(m.GetDescription()) > 1024 {
				err := MetaDescriptionValidationError{
					field:  "Description",
					reason: "value length must be at most 1024 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return MetaDescriptionMultiError(errors)
	}

	return nil
}

// MetaDescriptionMultiError is an error wrapping multiple validation errors
// returned by MetaDescription.ValidateAll() if the designated constraints
// aren't met.
type MetaDescriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetaDescriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetaDescriptionMultiError) AllErrors() []error { return m }

// MetaDescriptionValidationError is the validation error returned by
// MetaDescription.Validate if the designated constraints aren't met.
type MetaDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaDescriptionValidationError) ErrorName() string { return "MetaDescriptionValidationError" }

// Error satisfies the builtin error interface
func (e MetaDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetaDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaDescriptionValidationError{}

// Validate checks the field values on MetaMultiDescription with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetaMultiDescription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetaMultiDescription with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetaMultiDescriptionMultiError, or nil if none found.
func (m *MetaMultiDescription) ValidateAll() error {
	return m.validate(true)
}

func (m *MetaMultiDescription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetLabels()) > 0 {

		if len(m.GetLabels()) > 32 {
			err := MetaMultiDescriptionValidationError{
				field:  "Labels",
				reason: "value must contain no more than 32 item(s)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		_MetaMultiDescription_Labels_Unique := make(map[string]struct{}, len(m.GetLabels()))

		for idx, item := range m.GetLabels() {
			_, _ = idx, item

			if _, exists := _MetaMultiDescription_Labels_Unique[item]; exists {
				err := MetaMultiDescriptionValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_MetaMultiDescription_Labels_Unique[item] = struct{}{}
			}

			if utf8.RuneCountInString(item) > 32 {
				err := MetaMultiDescriptionValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "value length must be at most 32 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(m.GetTags()) > 0 {

		if len(m.GetTags()) > 32 {
			err := MetaMultiDescriptionValidationError{
				field:  "Tags",
				reason: "value must contain no more than 32 item(s)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		_MetaMultiDescription_Tags_Unique := make(map[string]struct{}, len(m.GetTags()))

		for idx, item := range m.GetTags() {
			_, _ = idx, item

			if _, exists := _MetaMultiDescription_Tags_Unique[item]; exists {
				err := MetaMultiDescriptionValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_MetaMultiDescription_Tags_Unique[item] = struct{}{}
			}

			if utf8.RuneCountInString(item) > 32 {
				err := MetaMultiDescriptionValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "value length must be at most 32 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return MetaMultiDescriptionMultiError(errors)
	}

	return nil
}

// MetaMultiDescriptionMultiError is an error wrapping multiple validation
// errors returned by MetaMultiDescription.ValidateAll() if the designated
// constraints aren't met.
type MetaMultiDescriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetaMultiDescriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetaMultiDescriptionMultiError) AllErrors() []error { return m }

// MetaMultiDescriptionValidationError is the validation error returned by
// MetaMultiDescription.Validate if the designated constraints aren't met.
type MetaMultiDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaMultiDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaMultiDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaMultiDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaMultiDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaMultiDescriptionValidationError) ErrorName() string {
	return "MetaMultiDescriptionValidationError"
}

// Error satisfies the builtin error interface
func (e MetaMultiDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetaMultiDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaMultiDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaMultiDescriptionValidationError{}
