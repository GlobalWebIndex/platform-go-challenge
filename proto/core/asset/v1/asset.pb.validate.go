// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/core/asset/v1/asset.proto

package asset_pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AssetInstance with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssetInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetInstance with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssetInstanceMultiError, or
// nil if none found.
func (m *AssetInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetInstanceValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetInstanceValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetInstanceValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Md != nil {

		if all {
			switch v := interface{}(m.GetMd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetInstanceValidationError{
						field:  "Md",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetInstanceValidationError{
						field:  "Md",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetInstanceValidationError{
					field:  "Md",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Chart != nil {

		if all {
			switch v := interface{}(m.GetChart()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetInstanceValidationError{
						field:  "Chart",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetInstanceValidationError{
						field:  "Chart",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChart()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetInstanceValidationError{
					field:  "Chart",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Insight != nil {

		if all {
			switch v := interface{}(m.GetInsight()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetInstanceValidationError{
						field:  "Insight",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetInstanceValidationError{
						field:  "Insight",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInsight()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetInstanceValidationError{
					field:  "Insight",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Audience != nil {

		if all {
			switch v := interface{}(m.GetAudience()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetInstanceValidationError{
						field:  "Audience",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetInstanceValidationError{
						field:  "Audience",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAudience()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetInstanceValidationError{
					field:  "Audience",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssetInstanceMultiError(errors)
	}

	return nil
}

// AssetInstanceMultiError is an error wrapping multiple validation errors
// returned by AssetInstance.ValidateAll() if the designated constraints
// aren't met.
type AssetInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetInstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetInstanceMultiError) AllErrors() []error { return m }

// AssetInstanceValidationError is the validation error returned by
// AssetInstance.Validate if the designated constraints aren't met.
type AssetInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetInstanceValidationError) ErrorName() string { return "AssetInstanceValidationError" }

// Error satisfies the builtin error interface
func (e AssetInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetInstanceValidationError{}

// Validate checks the field values on AssetMetaData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssetMetaData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetMetaData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssetMetaDataMultiError, or
// nil if none found.
func (m *AssetMetaData) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetMetaData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetTags()) > 0 {

		if len(m.GetTags()) > 32 {
			err := AssetMetaDataValidationError{
				field:  "Tags",
				reason: "value must contain no more than 32 item(s)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		_AssetMetaData_Tags_Unique := make(map[string]struct{}, len(m.GetTags()))

		for idx, item := range m.GetTags() {
			_, _ = idx, item

			if _, exists := _AssetMetaData_Tags_Unique[item]; exists {
				err := AssetMetaDataValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_AssetMetaData_Tags_Unique[item] = struct{}{}
			}

			if utf8.RuneCountInString(item) > 32 {
				err := AssetMetaDataValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "value length must be at most 32 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Title != nil {

		if m.GetTitle() != "" {

			if utf8.RuneCountInString(m.GetTitle()) > 256 {
				err := AssetMetaDataValidationError{
					field:  "Title",
					reason: "value length must be at most 256 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Topic != nil {

		if m.GetTopic() != "" {

			if utf8.RuneCountInString(m.GetTopic()) > 256 {
				err := AssetMetaDataValidationError{
					field:  "Topic",
					reason: "value length must be at most 256 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Label != nil {

		if m.GetLabel() != "" {

			if utf8.RuneCountInString(m.GetLabel()) > 256 {
				err := AssetMetaDataValidationError{
					field:  "Label",
					reason: "value length must be at most 256 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Description != nil {

		if m.GetDescription() != "" {

			if utf8.RuneCountInString(m.GetDescription()) > 1024 {
				err := AssetMetaDataValidationError{
					field:  "Description",
					reason: "value length must be at most 1024 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return AssetMetaDataMultiError(errors)
	}

	return nil
}

// AssetMetaDataMultiError is an error wrapping multiple validation errors
// returned by AssetMetaData.ValidateAll() if the designated constraints
// aren't met.
type AssetMetaDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetMetaDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetMetaDataMultiError) AllErrors() []error { return m }

// AssetMetaDataValidationError is the validation error returned by
// AssetMetaData.Validate if the designated constraints aren't met.
type AssetMetaDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetMetaDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetMetaDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetMetaDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetMetaDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetMetaDataValidationError) ErrorName() string { return "AssetMetaDataValidationError" }

// Error satisfies the builtin error interface
func (e AssetMetaDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetMetaData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetMetaDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetMetaDataValidationError{}

// Validate checks the field values on AssetChart with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssetChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetChart with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssetChartMultiError, or
// nil if none found.
func (m *AssetChart) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Md != nil {

		if all {
			switch v := interface{}(m.GetMd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetChartValidationError{
						field:  "Md",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetChartValidationError{
						field:  "Md",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetChartValidationError{
					field:  "Md",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Title != nil {

		if m.GetTitle() != "" {

			if utf8.RuneCountInString(m.GetTitle()) > 256 {
				err := AssetChartValidationError{
					field:  "Title",
					reason: "value length must be at most 256 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetChartValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetChartValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetChartValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DataRaw != nil {
		// no validation rules for DataRaw
	}

	if m.Options != nil {

		if all {
			switch v := interface{}(m.GetOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetChartValidationError{
						field:  "Options",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetChartValidationError{
						field:  "Options",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetChartValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssetChartMultiError(errors)
	}

	return nil
}

// AssetChartMultiError is an error wrapping multiple validation errors
// returned by AssetChart.ValidateAll() if the designated constraints aren't met.
type AssetChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetChartMultiError) AllErrors() []error { return m }

// AssetChartValidationError is the validation error returned by
// AssetChart.Validate if the designated constraints aren't met.
type AssetChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetChartValidationError) ErrorName() string { return "AssetChartValidationError" }

// Error satisfies the builtin error interface
func (e AssetChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetChartValidationError{}

// Validate checks the field values on AssetInsight with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssetInsight) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetInsight with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssetInsightMultiError, or
// nil if none found.
func (m *AssetInsight) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetInsight) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Md != nil {

		if all {
			switch v := interface{}(m.GetMd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetInsightValidationError{
						field:  "Md",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetInsightValidationError{
						field:  "Md",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetInsightValidationError{
					field:  "Md",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Sentence != nil {

		if l := utf8.RuneCountInString(m.GetSentence()); l < 1 || l > 256 {
			err := AssetInsightValidationError{
				field:  "Sentence",
				reason: "value length must be between 1 and 256 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AssetInsightMultiError(errors)
	}

	return nil
}

// AssetInsightMultiError is an error wrapping multiple validation errors
// returned by AssetInsight.ValidateAll() if the designated constraints aren't met.
type AssetInsightMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetInsightMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetInsightMultiError) AllErrors() []error { return m }

// AssetInsightValidationError is the validation error returned by
// AssetInsight.Validate if the designated constraints aren't met.
type AssetInsightValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetInsightValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetInsightValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetInsightValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetInsightValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetInsightValidationError) ErrorName() string { return "AssetInsightValidationError" }

// Error satisfies the builtin error interface
func (e AssetInsightValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetInsight.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetInsightValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetInsightValidationError{}

// Validate checks the field values on AssetAudience with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssetAudience) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetAudience with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssetAudienceMultiError, or
// nil if none found.
func (m *AssetAudience) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetAudience) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGenders()) > 0 {

		if len(m.GetGenders()) > 300 {
			err := AssetAudienceValidationError{
				field:  "Genders",
				reason: "value must contain no more than 300 item(s)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		_AssetAudience_Genders_Unique := make(map[string]struct{}, len(m.GetGenders()))

		for idx, item := range m.GetGenders() {
			_, _ = idx, item

			if _, exists := _AssetAudience_Genders_Unique[item]; exists {
				err := AssetAudienceValidationError{
					field:  fmt.Sprintf("Genders[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_AssetAudience_Genders_Unique[item] = struct{}{}
			}

			if _, ok := _AssetAudience_Genders_InLookup[item]; !ok {
				err := AssetAudienceValidationError{
					field:  fmt.Sprintf("Genders[%v]", idx),
					reason: "value must be in list [male female]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(m.GetCountryCodes()) > 0 {

		if len(m.GetCountryCodes()) > 300 {
			err := AssetAudienceValidationError{
				field:  "CountryCodes",
				reason: "value must contain no more than 300 item(s)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		_AssetAudience_CountryCodes_Unique := make(map[string]struct{}, len(m.GetCountryCodes()))

		for idx, item := range m.GetCountryCodes() {
			_, _ = idx, item

			if _, exists := _AssetAudience_CountryCodes_Unique[item]; exists {
				err := AssetAudienceValidationError{
					field:  fmt.Sprintf("CountryCodes[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_AssetAudience_CountryCodes_Unique[item] = struct{}{}
			}

			if utf8.RuneCountInString(item) > 2 {
				err := AssetAudienceValidationError{
					field:  fmt.Sprintf("CountryCodes[%v]", idx),
					reason: "value length must be at most 2 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Md != nil {

		if all {
			switch v := interface{}(m.GetMd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetAudienceValidationError{
						field:  "Md",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetAudienceValidationError{
						field:  "Md",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetAudienceValidationError{
					field:  "Md",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Gender != nil {

		if m.GetGender() != "" {

			if _, ok := _AssetAudience_Gender_InLookup[m.GetGender()]; !ok {
				err := AssetAudienceValidationError{
					field:  "Gender",
					reason: "value must be in list [male female]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.CountryCode != nil {

		if m.GetCountryCode() != "" {

			if utf8.RuneCountInString(m.GetCountryCode()) != 2 {
				err := AssetAudienceValidationError{
					field:  "CountryCode",
					reason: "value length must be 2 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)

			}

		}

	}

	if m.AgeMin != nil {

		if m.GetAgeMin() != 0 {

			if val := m.GetAgeMin(); val < 1 || val > 100 {
				err := AssetAudienceValidationError{
					field:  "AgeMin",
					reason: "value must be inside range [1, 100]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.AgeMax != nil {

		if m.GetAgeMax() != 0 {

			if val := m.GetAgeMax(); val < 1 || val > 100 {
				err := AssetAudienceValidationError{
					field:  "AgeMax",
					reason: "value must be inside range [1, 100]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.HoursMin != nil {

		if m.GetHoursMin() != 0 {

			if val := m.GetHoursMin(); val < 1 || val > 24 {
				err := AssetAudienceValidationError{
					field:  "HoursMin",
					reason: "value must be inside range [1, 24]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.HoursMax != nil {

		if m.GetHoursMax() != 0 {

			if val := m.GetHoursMax(); val < 1 || val > 24 {
				err := AssetAudienceValidationError{
					field:  "HoursMax",
					reason: "value must be inside range [1, 24]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.PurchasesMin != nil {

		if m.GetPurchasesMin() != 0 {

			if val := m.GetPurchasesMin(); val < 1 || val > 100000 {
				err := AssetAudienceValidationError{
					field:  "PurchasesMin",
					reason: "value must be inside range [1, 100000]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.PurchasesMax != nil {

		if m.GetPurchasesMax() != 0 {

			if val := m.GetPurchasesMax(); val < 1 || val > 100000 {
				err := AssetAudienceValidationError{
					field:  "PurchasesMax",
					reason: "value must be inside range [1, 100000]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return AssetAudienceMultiError(errors)
	}

	return nil
}

// AssetAudienceMultiError is an error wrapping multiple validation errors
// returned by AssetAudience.ValidateAll() if the designated constraints
// aren't met.
type AssetAudienceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetAudienceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetAudienceMultiError) AllErrors() []error { return m }

// AssetAudienceValidationError is the validation error returned by
// AssetAudience.Validate if the designated constraints aren't met.
type AssetAudienceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetAudienceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetAudienceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetAudienceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetAudienceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetAudienceValidationError) ErrorName() string { return "AssetAudienceValidationError" }

// Error satisfies the builtin error interface
func (e AssetAudienceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetAudience.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetAudienceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetAudienceValidationError{}

var _AssetAudience_Gender_InLookup = map[string]struct{}{
	"male":   {},
	"female": {},
}

var _AssetAudience_Genders_InLookup = map[string]struct{}{
	"male":   {},
	"female": {},
}
